import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, Modal } from 'react-native';
import * as Location from 'expo-location';
import axios from 'axios';
import { encode } from 'base-64';
import { Linking } from 'react-native';
import { TextInput } from 'react-native';

export default function App() {
  const [location, setLocation] = useState(null);
  const [buttonPressed, setButtonPressed] = useState(false);
  const [toNumber, setToNumber] = useState('+919372584027');
  const [modalVisible, setModalVisible] = useState(false);
  const [countdown, setCountdown] = useState(10); // Initial countdown value

  useEffect(() => {
    getLocation();
  }, []);

  const getLocation = async () => {
    try {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        throw new Error('Location permission not granted');
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    } catch (error) {
      console.error('Error getting location:', error);
    }
  };
 getLocation();
  const handleButtonPress = () => {
    setButtonPressed(true);
  };

  const handleButtonRelease = async () => {
    setButtonPressed(false);
    if (location && location.coords) {
      setModalVisible(true);
    }
  };

  const cancelSendMessage = () => {
    setModalVisible(false);
    // Optionally, you can clear any countdown here if needed
  };

  const sendSms = async (message, toNumber) => {
    try {
      const accountSid = 'ACed4bdf952a823ab5970cbc922c0cea72';
      const authToken = 'a8fa370e4bd4d68e377fa6b78f2b55d4';

      const authHeader = `Basic ${encode(`${accountSid}:${authToken}`)}`;
      const response = await axios.post(`https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`, {
        Body: message,
        From: '+15344447273', // Your Twilio phone number
        To: toNumber,
      }, {
        headers: {
          'Authorization': authHeader,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      });

      console.log(response.data);
    } catch (error) {
     console.log(error.message)
    }
  };

  // Countdown effect
  useEffect(() => {
    let timer;
    if (modalVisible && countdown > 0) {
      timer = setInterval(() => {
        setCountdown(countdown - 1);
      }, 500);
    } else if (countdown === 0) {
      // Send SMS when countdown reaches 0
      if(location){ sendSms(`Help! I feel unsafe. Location: https://maps.apple.com/?ll=${location.coords.latitude},${location.coords.longitude}`, toNumber);}
     
      setModalVisible(false);
      setLocation(null); // Reset location after sending SMS
    }

    // Cleanup interval
    return () => clearInterval(timer);
  }, [modalVisible, countdown]);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>{"Best Protection a woman can have is courage"}</Text>
      <Text style={styles.subtitle}>Press and hold the button if you feel unsafe.</Text>
      <TouchableOpacity
        style={[styles.button, { backgroundColor: buttonPressed ? 'gray' : 'blue' }]}
        onPressIn={handleButtonPress}
        onPressOut={handleButtonRelease}
        disabled={buttonPressed}
      >
        <Text style={styles.buttonText}>Press and Hold</Text>
      </TouchableOpacity>
      
      <TextInput
        style={styles.input}
        onChangeText={setToNumber}
        value={toNumber}
        placeholder="Enter recipient's phone number"
      />

      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalText}>Sending distress message in: {countdown}</Text>
            <TouchableOpacity style={styles.cancelButton} onPress={cancelSendMessage}>
              <Text style={styles.cancelButtonText}>Cancel</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    marginBottom: 20,
    textAlign: 'center',
  },
  button: {
    backgroundColor: 'blue',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 5,
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: 'gray',
    borderRadius: 5,
    padding: 10,
    marginTop: 10,
    marginBottom: 20,
    width: '100%',
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 10,
    alignItems: 'center',
  },
  modalText: {
    fontSize: 18,
    marginBottom: 20,
    textAlign: 'center',
  },
  cancelButton: {
    backgroundColor: 'red',
    padding: 10,
    borderRadius: 5,
    width: '50%',
  },
  cancelButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
  },
});
